// setup
1. https://go.dev/doc/install
2. Protobuf: https://github.com/protocolbuffers/protobuf/releases (download zip and set env path)
3. grpc: create go-workspace folder and set GOPTH in env variables or using terminal: set GOPATH={path}

// create src folder to create projects

// test by running: go run main.go

// Installing Chocolatey:
open powershell as administrator and check execution policy using: Get-ExecutionPolicy
change it AllSigned: Set-ExecutionPolicy AllSigned
if change is not applied, get list of execution policies: Get-ExecutionPolicy -List and use:  Set-ExecutionPolicy -Scope CurrentUser AllSigned -Force
now install chocolatey: Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
to ensure chocolatey is installed: choco

// installing make command
choco install make -y
make --version

// installing jq to read config varaibles and use in makefile
choco install jq
jq --version

// to hit server and client (to include all files in server/client folder for compilation):
go run (gci *.go).FullName

// installing evans for interaction with gRPC clients (https://github.com/ktr0731/evans)
go install github.com/ktr0731/evans@latest
to check if installed: evans
start server
in client: evans --host localhost --port {port_num} --reflection repl

basic usage: 1. show package
             2. select a package: package {package_name}
             3. show message
             4. show services
             5. service {name_of_service_you_want_to_use} // use "tab" to switch between options shown in pop-up
             6. call {rpc_end_point}
             7*. for client streaming, add i/p by pressing enter, to get response, CTRL+D
             8. CTRL + D to exit from bi-directional streaming